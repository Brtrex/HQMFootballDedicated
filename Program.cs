using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HQMEditorDedicated;
using System.Windows.Forms;

namespace Football
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Title = "Football Dedicated";
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine(@"  ______ ____   ____ _______ ____          _      _      ");
            Console.WriteLine(@" |  ____/ __ \ / __ \__   __|  _ \   /\   | |    | |     ");
            Console.WriteLine(@" | |__ | |  | | |  | | | |  | |_) | /  \  | |    | |     ");
            Console.WriteLine(@" |  __|| |  | | |  | | | |  |  _ < / /\ \ | |    | |     ");
            Console.WriteLine(@" | |   | |__| | |__| | | |  | |_) / ____ \| |____| |____ ");
            Console.WriteLine(@" |_|    \____/ \____/  |_|  |____/_/    \_\______|______|");
            Console.WriteLine("made by tymb                                        v0.28");
            string path = "data\\footballdedicated.exe";
            if (File.Exists(path))
            {
                System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = Path.GetFileName(path),
                    WorkingDirectory = Path.GetDirectoryName(path)
                };
                System.Diagnostics.Process.Start(psi);
            }
            else
            {
                MessageBox.Show("footballdedicated.exe not found", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Environment.Exit(1);
            }
            System.Threading.Thread.Sleep(500);
            string processName = args.Length > 0 ? args[0] : "footballdedicated";
            Console.Write("Attaching to " + processName + "...");
            Init(processName);
            Console.WriteLine("done.");
            Football Football = new Football();            
            
            while(true)
            {
                Football.CheckForBodyPuckC();
                Football.Detection();
                //Football.CheckForOffside();
                if (!MemoryEditor.IsAttached())
                {
                    Environment.Exit(1);
                }
            }
        }
        static void Init(string processName)
        {
            while (!MemoryEditor.Init(processName)) { }

            Chat.RecordCommandSource();
            DetectLastPuckToucherTeam();
            NoRespawns();
            MinHalves();
            Longergameovertime();
            Longerwarmuptime();
            NoRespawnOnRoundStart();
            WarmupTimeAfterGoals();
            ResetPuckAfterGame();
            Chat.FlushLastCommand();
            Tools.ResumeGame();
            MemoryEditor.WriteInt(28, 0x04130B8); //server version
            MemoryEditor.WriteInt(60000, 0x79348AC); //warmup
            MemoryEditor.WriteInt(0, 0x7933C9C);
            byte[] warmup_time = new byte[10] { 0xC7, 0x05, 0x14, 0x3E, 0x89, 0x01, 0xB8, 0x0B, 0x00, 0x00 };
            int warmup_add = 0x00411EDC;
            MemoryEditor.WriteBytes(warmup_time, warmup_add);
            byte[] twohalves = new byte[7] { 0x83, 0x3D, 0x10, 0x3E, 0x89, 0x01, 0x02 };
            int twohalves_add = 0x00407924;
            MemoryEditor.WriteBytes(twohalves, twohalves_add);
        }
        public static void DetectLastPuckToucherTeam()
        {
            MemoryEditor.WriteBytes(new byte[74] { 0x69, 0xC0, 0x98, 0x00, 0x00, 0x00, 0x8B, 0x88, 0x68, 0x0A, 0x53, 0x00, 0x89, 0x0D, 0x58, 0x49, 0xD3, 0x07, 0x8B, 0x88, 0x64, 0x0A, 0x53, 0x00, 0x89, 0x0D, 0x5C, 0x49, 0xD3, 0x07, 0xA1, 0x20, 0x3E, 0x89, 0x01, 0x8B, 0x0D, 0x20, 0x3E, 0x89, 0x01, 0x83, 0xE9, 0x01, 0x83, 0xE1, 0x03, 0x8B, 0x55, 0xDC, 0x69, 0xD2, 0xD8, 0x0B, 0x00, 0x00, 0x8B, 0x04, 0x8D, 0x24, 0x3E, 0x89, 0x01, 0x3B, 0x82, 0xE8, 0xB6, 0x87, 0x01, 0xE9, 0x18, 0xC7, 0xEC, 0xFF }, 0x00540700);
            MemoryEditor.WriteBytes(new byte[6] { 0xE9, 0x9F, 0x38, 0x13, 0x00, 0x90 }, 0x0040CE5C);
        }
        public static void WarmupTimeAfterGoals()
        {
            MemoryEditor.WriteBytes(new byte[25] { 0xC7, 0x05, 0x00, 0x32, 0x89, 0x01, 0xD0, 0x07, 0x00, 0x00, 0xC7, 0x05, 0x9C, 0x3C, 0xD3, 0x07, 0x01, 0x00, 0x00, 0x00, 0xE9, 0xCD, 0x74, 0xEC, 0xFF }, 0x00540500);
            MemoryEditor.WriteBytes(new byte[10] { 0xE9, 0x1F, 0x8B, 0x13, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90 }, 0x004079DC);
        }
        public static void ResetPuckAfterGame()
        {
            MemoryEditor.WriteBytes(new byte[35] { 0xC7, 0x05, 0x14, 0x3E, 0x89, 0x01, 0xD0, 0x07, 0x00, 0x00, 0xC7, 0x05, 0x9C, 0x3C, 0xD3, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x05, 0xA0, 0x48, 0xD3, 0x07, 0x01, 0x00, 0x00, 0x00, 0xE9, 0xE0, 0x73, 0xEC, 0xFF }, 0x00540600);
            MemoryEditor.WriteBytes(new byte[10] { 0xE9, 0x02, 0x8C, 0x13, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90 }, 0x004079F9);
        }
        public static void NoRespawnOnRoundStart()
        {
            MemoryEditor.WriteBytes(new byte[26] { 0x90, 0xC7, 0x05, 0x9C, 0x3C, 0xD3, 0x07, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x05, 0xA0, 0x48, 0xD3, 0x07, 0x01, 0x00, 0x00, 0x00, 0xE9, 0x48, 0x75, 0xEC, 0xFF }, 0x00540400);
            MemoryEditor.WriteBytes(new byte[5] { 0xE9, 0x9E, 0x8A, 0x13, 0x00 }, 0x0040795D);
        }
        public static void Longerwarmuptime()
        {
            MemoryEditor.WriteBytes(new byte[35] { 0xC7, 0x05, 0x14, 0x3E, 0x89, 0x01, 0xB8, 0x0B, 0x00, 0x00, 0xC7, 0x05, 0x9C, 0x3C, 0xD3, 0x07, 0x01, 0x00, 0x00, 0x00, 0xC7, 0x05, 0xA0, 0x48, 0xD3, 0x07, 0x01, 0x00, 0x00, 0x00, 0xE9, 0x18, 0x34, 0xEC, 0xFF }, 0x00540300);
            MemoryEditor.WriteBytes(new byte[10] { 0xE9, 0xCA, 0xCB, 0x13, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90 }, 0x00403731);
        }
        public static void Longergameovertime()
        {
            MemoryEditor.WriteBytes(new byte[25] { 0xC7, 0x05, 0x14, 0x3E, 0x89, 0x01, 0xB8, 0x0B, 0x00, 0x00, 0xC7, 0x05, 0x9C, 0x48, 0xD3, 0x07, 0x01, 0x00, 0x00, 0x00, 0xE9, 0x55, 0x77, 0xEC, 0xFF }, 0x00540200);
            MemoryEditor.WriteBytes(new byte[10] { 0xE9, 0x97, 0x88, 0x13, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90 }, 0x00407964);
        }
        public static void MinHalves()
        {
            MemoryEditor.WriteBytes(new byte[25] { 0xC7, 0x05, 0x08, 0x3E, 0x89, 0x01, 0x60, 0xEA, 0x00, 0x00, 0xC7, 0x05, 0x9C, 0x48, 0xD3, 0x07, 0x01, 0x00, 0x00, 0x00, 0xE9, 0x44, 0x78, 0xEC, 0xFF }, 0x00540100);
            MemoryEditor.WriteBytes(new byte[10] { 0xE9, 0xA8, 0x87, 0x13, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90 }, 0x00407953);
        }
        public static void NoRespawns()
        {
            byte[] code_original = new byte[7] { 0xE9, 0x6B, 0x86, 0x13, 0x00, 0x90, 0x90};
            byte[] code_inject = new byte[22] { 0x83, 0x3D, 0x0C, 0x3E, 0x89, 0x01, 0x01, 0xC7, 0x05, 0x9C, 0x3C, 0xD3, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x81, 0x79, 0xEC, 0xFF};

            int addr_original = 0x00407990;
            int addr_inject = 0x00540000;

            MemoryEditor.WriteBytes(code_inject, addr_inject);
            MemoryEditor.WriteBytes(code_original, addr_original);
        }
    }
}
